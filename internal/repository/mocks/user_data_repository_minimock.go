// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/vl-usp/water_bot/internal/repository.UserDataRepository -o user_data_repository_minimock.go -n UserDataRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/vl-usp/water_bot/internal/model"
)

// UserDataRepositoryMock implements mm_repository.UserDataRepository
type UserDataRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, userData *model.UserData) (i1 int64, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, userData *model.UserData)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mUserDataRepositoryMockCreate

	funcGet          func(ctx context.Context, id int64) (up1 *model.UserData, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mUserDataRepositoryMockGet

	funcGetFromCache          func(ctx context.Context, userID int64) (up1 *model.UserData, err error)
	funcGetFromCacheOrigin    string
	inspectFuncGetFromCache   func(ctx context.Context, userID int64)
	afterGetFromCacheCounter  uint64
	beforeGetFromCacheCounter uint64
	GetFromCacheMock          mUserDataRepositoryMockGetFromCache

	funcSaveField          func(ctx context.Context, userID int64, field string, value interface{}) (err error)
	funcSaveFieldOrigin    string
	inspectFuncSaveField   func(ctx context.Context, userID int64, field string, value interface{})
	afterSaveFieldCounter  uint64
	beforeSaveFieldCounter uint64
	SaveFieldMock          mUserDataRepositoryMockSaveField

	funcUpdate          func(ctx context.Context, userID int64, userData *model.UserData) (i1 int64, err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, userID int64, userData *model.UserData)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mUserDataRepositoryMockUpdate
}

// NewUserDataRepositoryMock returns a mock for mm_repository.UserDataRepository
func NewUserDataRepositoryMock(t minimock.Tester) *UserDataRepositoryMock {
	m := &UserDataRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mUserDataRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*UserDataRepositoryMockCreateParams{}

	m.GetMock = mUserDataRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*UserDataRepositoryMockGetParams{}

	m.GetFromCacheMock = mUserDataRepositoryMockGetFromCache{mock: m}
	m.GetFromCacheMock.callArgs = []*UserDataRepositoryMockGetFromCacheParams{}

	m.SaveFieldMock = mUserDataRepositoryMockSaveField{mock: m}
	m.SaveFieldMock.callArgs = []*UserDataRepositoryMockSaveFieldParams{}

	m.UpdateMock = mUserDataRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*UserDataRepositoryMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserDataRepositoryMockCreate struct {
	optional           bool
	mock               *UserDataRepositoryMock
	defaultExpectation *UserDataRepositoryMockCreateExpectation
	expectations       []*UserDataRepositoryMockCreateExpectation

	callArgs []*UserDataRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserDataRepositoryMockCreateExpectation specifies expectation struct of the UserDataRepository.Create
type UserDataRepositoryMockCreateExpectation struct {
	mock               *UserDataRepositoryMock
	params             *UserDataRepositoryMockCreateParams
	paramPtrs          *UserDataRepositoryMockCreateParamPtrs
	expectationOrigins UserDataRepositoryMockCreateExpectationOrigins
	results            *UserDataRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// UserDataRepositoryMockCreateParams contains parameters of the UserDataRepository.Create
type UserDataRepositoryMockCreateParams struct {
	ctx      context.Context
	userData *model.UserData
}

// UserDataRepositoryMockCreateParamPtrs contains pointers to parameters of the UserDataRepository.Create
type UserDataRepositoryMockCreateParamPtrs struct {
	ctx      *context.Context
	userData **model.UserData
}

// UserDataRepositoryMockCreateResults contains results of the UserDataRepository.Create
type UserDataRepositoryMockCreateResults struct {
	i1  int64
	err error
}

// UserDataRepositoryMockCreateOrigins contains origins of expectations of the UserDataRepository.Create
type UserDataRepositoryMockCreateExpectationOrigins struct {
	origin         string
	originCtx      string
	originUserData string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mUserDataRepositoryMockCreate) Optional() *mUserDataRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for UserDataRepository.Create
func (mmCreate *mUserDataRepositoryMockCreate) Expect(ctx context.Context, userData *model.UserData) *mUserDataRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserDataRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &UserDataRepositoryMockCreateParams{ctx, userData}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for UserDataRepository.Create
func (mmCreate *mUserDataRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mUserDataRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserDataRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &UserDataRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectUserDataParam2 sets up expected param userData for UserDataRepository.Create
func (mmCreate *mUserDataRepositoryMockCreate) ExpectUserDataParam2(userData *model.UserData) *mUserDataRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserDataRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &UserDataRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.userData = &userData
	mmCreate.defaultExpectation.expectationOrigins.originUserData = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the UserDataRepository.Create
func (mmCreate *mUserDataRepositoryMockCreate) Inspect(f func(ctx context.Context, userData *model.UserData)) *mUserDataRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for UserDataRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by UserDataRepository.Create
func (mmCreate *mUserDataRepositoryMockCreate) Return(i1 int64, err error) *UserDataRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserDataRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &UserDataRepositoryMockCreateResults{i1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the UserDataRepository.Create method
func (mmCreate *mUserDataRepositoryMockCreate) Set(f func(ctx context.Context, userData *model.UserData) (i1 int64, err error)) *UserDataRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the UserDataRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the UserDataRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the UserDataRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mUserDataRepositoryMockCreate) When(ctx context.Context, userData *model.UserData) *UserDataRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserDataRepositoryMock.Create mock is already set by Set")
	}

	expectation := &UserDataRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &UserDataRepositoryMockCreateParams{ctx, userData},
		expectationOrigins: UserDataRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up UserDataRepository.Create return parameters for the expectation previously defined by the When method
func (e *UserDataRepositoryMockCreateExpectation) Then(i1 int64, err error) *UserDataRepositoryMock {
	e.results = &UserDataRepositoryMockCreateResults{i1, err}
	return e.mock
}

// Times sets number of times UserDataRepository.Create should be invoked
func (mmCreate *mUserDataRepositoryMockCreate) Times(n uint64) *mUserDataRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of UserDataRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mUserDataRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_repository.UserDataRepository
func (mmCreate *UserDataRepositoryMock) Create(ctx context.Context, userData *model.UserData) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, userData)
	}

	mm_params := UserDataRepositoryMockCreateParams{ctx, userData}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := UserDataRepositoryMockCreateParams{ctx, userData}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("UserDataRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userData != nil && !minimock.Equal(*mm_want_ptrs.userData, mm_got.userData) {
				mmCreate.t.Errorf("UserDataRepositoryMock.Create got unexpected parameter userData, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originUserData, *mm_want_ptrs.userData, mm_got.userData, minimock.Diff(*mm_want_ptrs.userData, mm_got.userData))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("UserDataRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the UserDataRepositoryMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, userData)
	}
	mmCreate.t.Fatalf("Unexpected call to UserDataRepositoryMock.Create. %v %v", ctx, userData)
	return
}

// CreateAfterCounter returns a count of finished UserDataRepositoryMock.Create invocations
func (mmCreate *UserDataRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of UserDataRepositoryMock.Create invocations
func (mmCreate *UserDataRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to UserDataRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mUserDataRepositoryMockCreate) Calls() []*UserDataRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*UserDataRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *UserDataRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *UserDataRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to UserDataRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to UserDataRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mUserDataRepositoryMockGet struct {
	optional           bool
	mock               *UserDataRepositoryMock
	defaultExpectation *UserDataRepositoryMockGetExpectation
	expectations       []*UserDataRepositoryMockGetExpectation

	callArgs []*UserDataRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserDataRepositoryMockGetExpectation specifies expectation struct of the UserDataRepository.Get
type UserDataRepositoryMockGetExpectation struct {
	mock               *UserDataRepositoryMock
	params             *UserDataRepositoryMockGetParams
	paramPtrs          *UserDataRepositoryMockGetParamPtrs
	expectationOrigins UserDataRepositoryMockGetExpectationOrigins
	results            *UserDataRepositoryMockGetResults
	returnOrigin       string
	Counter            uint64
}

// UserDataRepositoryMockGetParams contains parameters of the UserDataRepository.Get
type UserDataRepositoryMockGetParams struct {
	ctx context.Context
	id  int64
}

// UserDataRepositoryMockGetParamPtrs contains pointers to parameters of the UserDataRepository.Get
type UserDataRepositoryMockGetParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// UserDataRepositoryMockGetResults contains results of the UserDataRepository.Get
type UserDataRepositoryMockGetResults struct {
	up1 *model.UserData
	err error
}

// UserDataRepositoryMockGetOrigins contains origins of expectations of the UserDataRepository.Get
type UserDataRepositoryMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mUserDataRepositoryMockGet) Optional() *mUserDataRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for UserDataRepository.Get
func (mmGet *mUserDataRepositoryMockGet) Expect(ctx context.Context, id int64) *mUserDataRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserDataRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &UserDataRepositoryMockGetParams{ctx, id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for UserDataRepository.Get
func (mmGet *mUserDataRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mUserDataRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserDataRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserDataRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectIdParam2 sets up expected param id for UserDataRepository.Get
func (mmGet *mUserDataRepositoryMockGet) ExpectIdParam2(id int64) *mUserDataRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserDataRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserDataRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the UserDataRepository.Get
func (mmGet *mUserDataRepositoryMockGet) Inspect(f func(ctx context.Context, id int64)) *mUserDataRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for UserDataRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by UserDataRepository.Get
func (mmGet *mUserDataRepositoryMockGet) Return(up1 *model.UserData, err error) *UserDataRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserDataRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &UserDataRepositoryMockGetResults{up1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the UserDataRepository.Get method
func (mmGet *mUserDataRepositoryMockGet) Set(f func(ctx context.Context, id int64) (up1 *model.UserData, err error)) *UserDataRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the UserDataRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the UserDataRepository.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the UserDataRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mUserDataRepositoryMockGet) When(ctx context.Context, id int64) *UserDataRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserDataRepositoryMock.Get mock is already set by Set")
	}

	expectation := &UserDataRepositoryMockGetExpectation{
		mock:               mmGet.mock,
		params:             &UserDataRepositoryMockGetParams{ctx, id},
		expectationOrigins: UserDataRepositoryMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up UserDataRepository.Get return parameters for the expectation previously defined by the When method
func (e *UserDataRepositoryMockGetExpectation) Then(up1 *model.UserData, err error) *UserDataRepositoryMock {
	e.results = &UserDataRepositoryMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times UserDataRepository.Get should be invoked
func (mmGet *mUserDataRepositoryMockGet) Times(n uint64) *mUserDataRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of UserDataRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mUserDataRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_repository.UserDataRepository
func (mmGet *UserDataRepositoryMock) Get(ctx context.Context, id int64) (up1 *model.UserData, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := UserDataRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := UserDataRepositoryMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("UserDataRepositoryMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("UserDataRepositoryMock.Get got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("UserDataRepositoryMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the UserDataRepositoryMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to UserDataRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished UserDataRepositoryMock.Get invocations
func (mmGet *UserDataRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of UserDataRepositoryMock.Get invocations
func (mmGet *UserDataRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to UserDataRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mUserDataRepositoryMockGet) Calls() []*UserDataRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*UserDataRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *UserDataRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *UserDataRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to UserDataRepositoryMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to UserDataRepositoryMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mUserDataRepositoryMockGetFromCache struct {
	optional           bool
	mock               *UserDataRepositoryMock
	defaultExpectation *UserDataRepositoryMockGetFromCacheExpectation
	expectations       []*UserDataRepositoryMockGetFromCacheExpectation

	callArgs []*UserDataRepositoryMockGetFromCacheParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserDataRepositoryMockGetFromCacheExpectation specifies expectation struct of the UserDataRepository.GetFromCache
type UserDataRepositoryMockGetFromCacheExpectation struct {
	mock               *UserDataRepositoryMock
	params             *UserDataRepositoryMockGetFromCacheParams
	paramPtrs          *UserDataRepositoryMockGetFromCacheParamPtrs
	expectationOrigins UserDataRepositoryMockGetFromCacheExpectationOrigins
	results            *UserDataRepositoryMockGetFromCacheResults
	returnOrigin       string
	Counter            uint64
}

// UserDataRepositoryMockGetFromCacheParams contains parameters of the UserDataRepository.GetFromCache
type UserDataRepositoryMockGetFromCacheParams struct {
	ctx    context.Context
	userID int64
}

// UserDataRepositoryMockGetFromCacheParamPtrs contains pointers to parameters of the UserDataRepository.GetFromCache
type UserDataRepositoryMockGetFromCacheParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// UserDataRepositoryMockGetFromCacheResults contains results of the UserDataRepository.GetFromCache
type UserDataRepositoryMockGetFromCacheResults struct {
	up1 *model.UserData
	err error
}

// UserDataRepositoryMockGetFromCacheOrigins contains origins of expectations of the UserDataRepository.GetFromCache
type UserDataRepositoryMockGetFromCacheExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Optional() *mUserDataRepositoryMockGetFromCache {
	mmGetFromCache.optional = true
	return mmGetFromCache
}

// Expect sets up expected params for UserDataRepository.GetFromCache
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Expect(ctx context.Context, userID int64) *mUserDataRepositoryMockGetFromCache {
	if mmGetFromCache.mock.funcGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Set")
	}

	if mmGetFromCache.defaultExpectation == nil {
		mmGetFromCache.defaultExpectation = &UserDataRepositoryMockGetFromCacheExpectation{}
	}

	if mmGetFromCache.defaultExpectation.paramPtrs != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by ExpectParams functions")
	}

	mmGetFromCache.defaultExpectation.params = &UserDataRepositoryMockGetFromCacheParams{ctx, userID}
	mmGetFromCache.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetFromCache.expectations {
		if minimock.Equal(e.params, mmGetFromCache.defaultExpectation.params) {
			mmGetFromCache.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetFromCache.defaultExpectation.params)
		}
	}

	return mmGetFromCache
}

// ExpectCtxParam1 sets up expected param ctx for UserDataRepository.GetFromCache
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) ExpectCtxParam1(ctx context.Context) *mUserDataRepositoryMockGetFromCache {
	if mmGetFromCache.mock.funcGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Set")
	}

	if mmGetFromCache.defaultExpectation == nil {
		mmGetFromCache.defaultExpectation = &UserDataRepositoryMockGetFromCacheExpectation{}
	}

	if mmGetFromCache.defaultExpectation.params != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Expect")
	}

	if mmGetFromCache.defaultExpectation.paramPtrs == nil {
		mmGetFromCache.defaultExpectation.paramPtrs = &UserDataRepositoryMockGetFromCacheParamPtrs{}
	}
	mmGetFromCache.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetFromCache.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetFromCache
}

// ExpectUserIDParam2 sets up expected param userID for UserDataRepository.GetFromCache
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) ExpectUserIDParam2(userID int64) *mUserDataRepositoryMockGetFromCache {
	if mmGetFromCache.mock.funcGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Set")
	}

	if mmGetFromCache.defaultExpectation == nil {
		mmGetFromCache.defaultExpectation = &UserDataRepositoryMockGetFromCacheExpectation{}
	}

	if mmGetFromCache.defaultExpectation.params != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Expect")
	}

	if mmGetFromCache.defaultExpectation.paramPtrs == nil {
		mmGetFromCache.defaultExpectation.paramPtrs = &UserDataRepositoryMockGetFromCacheParamPtrs{}
	}
	mmGetFromCache.defaultExpectation.paramPtrs.userID = &userID
	mmGetFromCache.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGetFromCache
}

// Inspect accepts an inspector function that has same arguments as the UserDataRepository.GetFromCache
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Inspect(f func(ctx context.Context, userID int64)) *mUserDataRepositoryMockGetFromCache {
	if mmGetFromCache.mock.inspectFuncGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("Inspect function is already set for UserDataRepositoryMock.GetFromCache")
	}

	mmGetFromCache.mock.inspectFuncGetFromCache = f

	return mmGetFromCache
}

// Return sets up results that will be returned by UserDataRepository.GetFromCache
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Return(up1 *model.UserData, err error) *UserDataRepositoryMock {
	if mmGetFromCache.mock.funcGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Set")
	}

	if mmGetFromCache.defaultExpectation == nil {
		mmGetFromCache.defaultExpectation = &UserDataRepositoryMockGetFromCacheExpectation{mock: mmGetFromCache.mock}
	}
	mmGetFromCache.defaultExpectation.results = &UserDataRepositoryMockGetFromCacheResults{up1, err}
	mmGetFromCache.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetFromCache.mock
}

// Set uses given function f to mock the UserDataRepository.GetFromCache method
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Set(f func(ctx context.Context, userID int64) (up1 *model.UserData, err error)) *UserDataRepositoryMock {
	if mmGetFromCache.defaultExpectation != nil {
		mmGetFromCache.mock.t.Fatalf("Default expectation is already set for the UserDataRepository.GetFromCache method")
	}

	if len(mmGetFromCache.expectations) > 0 {
		mmGetFromCache.mock.t.Fatalf("Some expectations are already set for the UserDataRepository.GetFromCache method")
	}

	mmGetFromCache.mock.funcGetFromCache = f
	mmGetFromCache.mock.funcGetFromCacheOrigin = minimock.CallerInfo(1)
	return mmGetFromCache.mock
}

// When sets expectation for the UserDataRepository.GetFromCache which will trigger the result defined by the following
// Then helper
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) When(ctx context.Context, userID int64) *UserDataRepositoryMockGetFromCacheExpectation {
	if mmGetFromCache.mock.funcGetFromCache != nil {
		mmGetFromCache.mock.t.Fatalf("UserDataRepositoryMock.GetFromCache mock is already set by Set")
	}

	expectation := &UserDataRepositoryMockGetFromCacheExpectation{
		mock:               mmGetFromCache.mock,
		params:             &UserDataRepositoryMockGetFromCacheParams{ctx, userID},
		expectationOrigins: UserDataRepositoryMockGetFromCacheExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetFromCache.expectations = append(mmGetFromCache.expectations, expectation)
	return expectation
}

// Then sets up UserDataRepository.GetFromCache return parameters for the expectation previously defined by the When method
func (e *UserDataRepositoryMockGetFromCacheExpectation) Then(up1 *model.UserData, err error) *UserDataRepositoryMock {
	e.results = &UserDataRepositoryMockGetFromCacheResults{up1, err}
	return e.mock
}

// Times sets number of times UserDataRepository.GetFromCache should be invoked
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Times(n uint64) *mUserDataRepositoryMockGetFromCache {
	if n == 0 {
		mmGetFromCache.mock.t.Fatalf("Times of UserDataRepositoryMock.GetFromCache mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetFromCache.expectedInvocations, n)
	mmGetFromCache.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetFromCache
}

func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) invocationsDone() bool {
	if len(mmGetFromCache.expectations) == 0 && mmGetFromCache.defaultExpectation == nil && mmGetFromCache.mock.funcGetFromCache == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetFromCache.mock.afterGetFromCacheCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetFromCache.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetFromCache implements mm_repository.UserDataRepository
func (mmGetFromCache *UserDataRepositoryMock) GetFromCache(ctx context.Context, userID int64) (up1 *model.UserData, err error) {
	mm_atomic.AddUint64(&mmGetFromCache.beforeGetFromCacheCounter, 1)
	defer mm_atomic.AddUint64(&mmGetFromCache.afterGetFromCacheCounter, 1)

	mmGetFromCache.t.Helper()

	if mmGetFromCache.inspectFuncGetFromCache != nil {
		mmGetFromCache.inspectFuncGetFromCache(ctx, userID)
	}

	mm_params := UserDataRepositoryMockGetFromCacheParams{ctx, userID}

	// Record call args
	mmGetFromCache.GetFromCacheMock.mutex.Lock()
	mmGetFromCache.GetFromCacheMock.callArgs = append(mmGetFromCache.GetFromCacheMock.callArgs, &mm_params)
	mmGetFromCache.GetFromCacheMock.mutex.Unlock()

	for _, e := range mmGetFromCache.GetFromCacheMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetFromCache.GetFromCacheMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetFromCache.GetFromCacheMock.defaultExpectation.Counter, 1)
		mm_want := mmGetFromCache.GetFromCacheMock.defaultExpectation.params
		mm_want_ptrs := mmGetFromCache.GetFromCacheMock.defaultExpectation.paramPtrs

		mm_got := UserDataRepositoryMockGetFromCacheParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetFromCache.t.Errorf("UserDataRepositoryMock.GetFromCache got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetFromCache.GetFromCacheMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGetFromCache.t.Errorf("UserDataRepositoryMock.GetFromCache got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetFromCache.GetFromCacheMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetFromCache.t.Errorf("UserDataRepositoryMock.GetFromCache got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetFromCache.GetFromCacheMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetFromCache.GetFromCacheMock.defaultExpectation.results
		if mm_results == nil {
			mmGetFromCache.t.Fatal("No results are set for the UserDataRepositoryMock.GetFromCache")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetFromCache.funcGetFromCache != nil {
		return mmGetFromCache.funcGetFromCache(ctx, userID)
	}
	mmGetFromCache.t.Fatalf("Unexpected call to UserDataRepositoryMock.GetFromCache. %v %v", ctx, userID)
	return
}

// GetFromCacheAfterCounter returns a count of finished UserDataRepositoryMock.GetFromCache invocations
func (mmGetFromCache *UserDataRepositoryMock) GetFromCacheAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFromCache.afterGetFromCacheCounter)
}

// GetFromCacheBeforeCounter returns a count of UserDataRepositoryMock.GetFromCache invocations
func (mmGetFromCache *UserDataRepositoryMock) GetFromCacheBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFromCache.beforeGetFromCacheCounter)
}

// Calls returns a list of arguments used in each call to UserDataRepositoryMock.GetFromCache.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetFromCache *mUserDataRepositoryMockGetFromCache) Calls() []*UserDataRepositoryMockGetFromCacheParams {
	mmGetFromCache.mutex.RLock()

	argCopy := make([]*UserDataRepositoryMockGetFromCacheParams, len(mmGetFromCache.callArgs))
	copy(argCopy, mmGetFromCache.callArgs)

	mmGetFromCache.mutex.RUnlock()

	return argCopy
}

// MinimockGetFromCacheDone returns true if the count of the GetFromCache invocations corresponds
// the number of defined expectations
func (m *UserDataRepositoryMock) MinimockGetFromCacheDone() bool {
	if m.GetFromCacheMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetFromCacheMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetFromCacheMock.invocationsDone()
}

// MinimockGetFromCacheInspect logs each unmet expectation
func (m *UserDataRepositoryMock) MinimockGetFromCacheInspect() {
	for _, e := range m.GetFromCacheMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserDataRepositoryMock.GetFromCache at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetFromCacheCounter := mm_atomic.LoadUint64(&m.afterGetFromCacheCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetFromCacheMock.defaultExpectation != nil && afterGetFromCacheCounter < 1 {
		if m.GetFromCacheMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserDataRepositoryMock.GetFromCache at\n%s", m.GetFromCacheMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserDataRepositoryMock.GetFromCache at\n%s with params: %#v", m.GetFromCacheMock.defaultExpectation.expectationOrigins.origin, *m.GetFromCacheMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFromCache != nil && afterGetFromCacheCounter < 1 {
		m.t.Errorf("Expected call to UserDataRepositoryMock.GetFromCache at\n%s", m.funcGetFromCacheOrigin)
	}

	if !m.GetFromCacheMock.invocationsDone() && afterGetFromCacheCounter > 0 {
		m.t.Errorf("Expected %d calls to UserDataRepositoryMock.GetFromCache at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetFromCacheMock.expectedInvocations), m.GetFromCacheMock.expectedInvocationsOrigin, afterGetFromCacheCounter)
	}
}

type mUserDataRepositoryMockSaveField struct {
	optional           bool
	mock               *UserDataRepositoryMock
	defaultExpectation *UserDataRepositoryMockSaveFieldExpectation
	expectations       []*UserDataRepositoryMockSaveFieldExpectation

	callArgs []*UserDataRepositoryMockSaveFieldParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserDataRepositoryMockSaveFieldExpectation specifies expectation struct of the UserDataRepository.SaveField
type UserDataRepositoryMockSaveFieldExpectation struct {
	mock               *UserDataRepositoryMock
	params             *UserDataRepositoryMockSaveFieldParams
	paramPtrs          *UserDataRepositoryMockSaveFieldParamPtrs
	expectationOrigins UserDataRepositoryMockSaveFieldExpectationOrigins
	results            *UserDataRepositoryMockSaveFieldResults
	returnOrigin       string
	Counter            uint64
}

// UserDataRepositoryMockSaveFieldParams contains parameters of the UserDataRepository.SaveField
type UserDataRepositoryMockSaveFieldParams struct {
	ctx    context.Context
	userID int64
	field  string
	value  interface{}
}

// UserDataRepositoryMockSaveFieldParamPtrs contains pointers to parameters of the UserDataRepository.SaveField
type UserDataRepositoryMockSaveFieldParamPtrs struct {
	ctx    *context.Context
	userID *int64
	field  *string
	value  *interface{}
}

// UserDataRepositoryMockSaveFieldResults contains results of the UserDataRepository.SaveField
type UserDataRepositoryMockSaveFieldResults struct {
	err error
}

// UserDataRepositoryMockSaveFieldOrigins contains origins of expectations of the UserDataRepository.SaveField
type UserDataRepositoryMockSaveFieldExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
	originField  string
	originValue  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveField *mUserDataRepositoryMockSaveField) Optional() *mUserDataRepositoryMockSaveField {
	mmSaveField.optional = true
	return mmSaveField
}

// Expect sets up expected params for UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) Expect(ctx context.Context, userID int64, field string, value interface{}) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{}
	}

	if mmSaveField.defaultExpectation.paramPtrs != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by ExpectParams functions")
	}

	mmSaveField.defaultExpectation.params = &UserDataRepositoryMockSaveFieldParams{ctx, userID, field, value}
	mmSaveField.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveField.expectations {
		if minimock.Equal(e.params, mmSaveField.defaultExpectation.params) {
			mmSaveField.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveField.defaultExpectation.params)
		}
	}

	return mmSaveField
}

// ExpectCtxParam1 sets up expected param ctx for UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) ExpectCtxParam1(ctx context.Context) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{}
	}

	if mmSaveField.defaultExpectation.params != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Expect")
	}

	if mmSaveField.defaultExpectation.paramPtrs == nil {
		mmSaveField.defaultExpectation.paramPtrs = &UserDataRepositoryMockSaveFieldParamPtrs{}
	}
	mmSaveField.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveField.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveField
}

// ExpectUserIDParam2 sets up expected param userID for UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) ExpectUserIDParam2(userID int64) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{}
	}

	if mmSaveField.defaultExpectation.params != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Expect")
	}

	if mmSaveField.defaultExpectation.paramPtrs == nil {
		mmSaveField.defaultExpectation.paramPtrs = &UserDataRepositoryMockSaveFieldParamPtrs{}
	}
	mmSaveField.defaultExpectation.paramPtrs.userID = &userID
	mmSaveField.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmSaveField
}

// ExpectFieldParam3 sets up expected param field for UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) ExpectFieldParam3(field string) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{}
	}

	if mmSaveField.defaultExpectation.params != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Expect")
	}

	if mmSaveField.defaultExpectation.paramPtrs == nil {
		mmSaveField.defaultExpectation.paramPtrs = &UserDataRepositoryMockSaveFieldParamPtrs{}
	}
	mmSaveField.defaultExpectation.paramPtrs.field = &field
	mmSaveField.defaultExpectation.expectationOrigins.originField = minimock.CallerInfo(1)

	return mmSaveField
}

// ExpectValueParam4 sets up expected param value for UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) ExpectValueParam4(value interface{}) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{}
	}

	if mmSaveField.defaultExpectation.params != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Expect")
	}

	if mmSaveField.defaultExpectation.paramPtrs == nil {
		mmSaveField.defaultExpectation.paramPtrs = &UserDataRepositoryMockSaveFieldParamPtrs{}
	}
	mmSaveField.defaultExpectation.paramPtrs.value = &value
	mmSaveField.defaultExpectation.expectationOrigins.originValue = minimock.CallerInfo(1)

	return mmSaveField
}

// Inspect accepts an inspector function that has same arguments as the UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) Inspect(f func(ctx context.Context, userID int64, field string, value interface{})) *mUserDataRepositoryMockSaveField {
	if mmSaveField.mock.inspectFuncSaveField != nil {
		mmSaveField.mock.t.Fatalf("Inspect function is already set for UserDataRepositoryMock.SaveField")
	}

	mmSaveField.mock.inspectFuncSaveField = f

	return mmSaveField
}

// Return sets up results that will be returned by UserDataRepository.SaveField
func (mmSaveField *mUserDataRepositoryMockSaveField) Return(err error) *UserDataRepositoryMock {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	if mmSaveField.defaultExpectation == nil {
		mmSaveField.defaultExpectation = &UserDataRepositoryMockSaveFieldExpectation{mock: mmSaveField.mock}
	}
	mmSaveField.defaultExpectation.results = &UserDataRepositoryMockSaveFieldResults{err}
	mmSaveField.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveField.mock
}

// Set uses given function f to mock the UserDataRepository.SaveField method
func (mmSaveField *mUserDataRepositoryMockSaveField) Set(f func(ctx context.Context, userID int64, field string, value interface{}) (err error)) *UserDataRepositoryMock {
	if mmSaveField.defaultExpectation != nil {
		mmSaveField.mock.t.Fatalf("Default expectation is already set for the UserDataRepository.SaveField method")
	}

	if len(mmSaveField.expectations) > 0 {
		mmSaveField.mock.t.Fatalf("Some expectations are already set for the UserDataRepository.SaveField method")
	}

	mmSaveField.mock.funcSaveField = f
	mmSaveField.mock.funcSaveFieldOrigin = minimock.CallerInfo(1)
	return mmSaveField.mock
}

// When sets expectation for the UserDataRepository.SaveField which will trigger the result defined by the following
// Then helper
func (mmSaveField *mUserDataRepositoryMockSaveField) When(ctx context.Context, userID int64, field string, value interface{}) *UserDataRepositoryMockSaveFieldExpectation {
	if mmSaveField.mock.funcSaveField != nil {
		mmSaveField.mock.t.Fatalf("UserDataRepositoryMock.SaveField mock is already set by Set")
	}

	expectation := &UserDataRepositoryMockSaveFieldExpectation{
		mock:               mmSaveField.mock,
		params:             &UserDataRepositoryMockSaveFieldParams{ctx, userID, field, value},
		expectationOrigins: UserDataRepositoryMockSaveFieldExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveField.expectations = append(mmSaveField.expectations, expectation)
	return expectation
}

// Then sets up UserDataRepository.SaveField return parameters for the expectation previously defined by the When method
func (e *UserDataRepositoryMockSaveFieldExpectation) Then(err error) *UserDataRepositoryMock {
	e.results = &UserDataRepositoryMockSaveFieldResults{err}
	return e.mock
}

// Times sets number of times UserDataRepository.SaveField should be invoked
func (mmSaveField *mUserDataRepositoryMockSaveField) Times(n uint64) *mUserDataRepositoryMockSaveField {
	if n == 0 {
		mmSaveField.mock.t.Fatalf("Times of UserDataRepositoryMock.SaveField mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveField.expectedInvocations, n)
	mmSaveField.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveField
}

func (mmSaveField *mUserDataRepositoryMockSaveField) invocationsDone() bool {
	if len(mmSaveField.expectations) == 0 && mmSaveField.defaultExpectation == nil && mmSaveField.mock.funcSaveField == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveField.mock.afterSaveFieldCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveField.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveField implements mm_repository.UserDataRepository
func (mmSaveField *UserDataRepositoryMock) SaveField(ctx context.Context, userID int64, field string, value interface{}) (err error) {
	mm_atomic.AddUint64(&mmSaveField.beforeSaveFieldCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveField.afterSaveFieldCounter, 1)

	mmSaveField.t.Helper()

	if mmSaveField.inspectFuncSaveField != nil {
		mmSaveField.inspectFuncSaveField(ctx, userID, field, value)
	}

	mm_params := UserDataRepositoryMockSaveFieldParams{ctx, userID, field, value}

	// Record call args
	mmSaveField.SaveFieldMock.mutex.Lock()
	mmSaveField.SaveFieldMock.callArgs = append(mmSaveField.SaveFieldMock.callArgs, &mm_params)
	mmSaveField.SaveFieldMock.mutex.Unlock()

	for _, e := range mmSaveField.SaveFieldMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveField.SaveFieldMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveField.SaveFieldMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveField.SaveFieldMock.defaultExpectation.params
		mm_want_ptrs := mmSaveField.SaveFieldMock.defaultExpectation.paramPtrs

		mm_got := UserDataRepositoryMockSaveFieldParams{ctx, userID, field, value}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveField.t.Errorf("UserDataRepositoryMock.SaveField got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveField.SaveFieldMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmSaveField.t.Errorf("UserDataRepositoryMock.SaveField got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveField.SaveFieldMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.field != nil && !minimock.Equal(*mm_want_ptrs.field, mm_got.field) {
				mmSaveField.t.Errorf("UserDataRepositoryMock.SaveField got unexpected parameter field, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveField.SaveFieldMock.defaultExpectation.expectationOrigins.originField, *mm_want_ptrs.field, mm_got.field, minimock.Diff(*mm_want_ptrs.field, mm_got.field))
			}

			if mm_want_ptrs.value != nil && !minimock.Equal(*mm_want_ptrs.value, mm_got.value) {
				mmSaveField.t.Errorf("UserDataRepositoryMock.SaveField got unexpected parameter value, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveField.SaveFieldMock.defaultExpectation.expectationOrigins.originValue, *mm_want_ptrs.value, mm_got.value, minimock.Diff(*mm_want_ptrs.value, mm_got.value))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveField.t.Errorf("UserDataRepositoryMock.SaveField got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveField.SaveFieldMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveField.SaveFieldMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveField.t.Fatal("No results are set for the UserDataRepositoryMock.SaveField")
		}
		return (*mm_results).err
	}
	if mmSaveField.funcSaveField != nil {
		return mmSaveField.funcSaveField(ctx, userID, field, value)
	}
	mmSaveField.t.Fatalf("Unexpected call to UserDataRepositoryMock.SaveField. %v %v %v %v", ctx, userID, field, value)
	return
}

// SaveFieldAfterCounter returns a count of finished UserDataRepositoryMock.SaveField invocations
func (mmSaveField *UserDataRepositoryMock) SaveFieldAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveField.afterSaveFieldCounter)
}

// SaveFieldBeforeCounter returns a count of UserDataRepositoryMock.SaveField invocations
func (mmSaveField *UserDataRepositoryMock) SaveFieldBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveField.beforeSaveFieldCounter)
}

// Calls returns a list of arguments used in each call to UserDataRepositoryMock.SaveField.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveField *mUserDataRepositoryMockSaveField) Calls() []*UserDataRepositoryMockSaveFieldParams {
	mmSaveField.mutex.RLock()

	argCopy := make([]*UserDataRepositoryMockSaveFieldParams, len(mmSaveField.callArgs))
	copy(argCopy, mmSaveField.callArgs)

	mmSaveField.mutex.RUnlock()

	return argCopy
}

// MinimockSaveFieldDone returns true if the count of the SaveField invocations corresponds
// the number of defined expectations
func (m *UserDataRepositoryMock) MinimockSaveFieldDone() bool {
	if m.SaveFieldMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveFieldMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveFieldMock.invocationsDone()
}

// MinimockSaveFieldInspect logs each unmet expectation
func (m *UserDataRepositoryMock) MinimockSaveFieldInspect() {
	for _, e := range m.SaveFieldMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserDataRepositoryMock.SaveField at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveFieldCounter := mm_atomic.LoadUint64(&m.afterSaveFieldCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveFieldMock.defaultExpectation != nil && afterSaveFieldCounter < 1 {
		if m.SaveFieldMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserDataRepositoryMock.SaveField at\n%s", m.SaveFieldMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserDataRepositoryMock.SaveField at\n%s with params: %#v", m.SaveFieldMock.defaultExpectation.expectationOrigins.origin, *m.SaveFieldMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveField != nil && afterSaveFieldCounter < 1 {
		m.t.Errorf("Expected call to UserDataRepositoryMock.SaveField at\n%s", m.funcSaveFieldOrigin)
	}

	if !m.SaveFieldMock.invocationsDone() && afterSaveFieldCounter > 0 {
		m.t.Errorf("Expected %d calls to UserDataRepositoryMock.SaveField at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveFieldMock.expectedInvocations), m.SaveFieldMock.expectedInvocationsOrigin, afterSaveFieldCounter)
	}
}

type mUserDataRepositoryMockUpdate struct {
	optional           bool
	mock               *UserDataRepositoryMock
	defaultExpectation *UserDataRepositoryMockUpdateExpectation
	expectations       []*UserDataRepositoryMockUpdateExpectation

	callArgs []*UserDataRepositoryMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserDataRepositoryMockUpdateExpectation specifies expectation struct of the UserDataRepository.Update
type UserDataRepositoryMockUpdateExpectation struct {
	mock               *UserDataRepositoryMock
	params             *UserDataRepositoryMockUpdateParams
	paramPtrs          *UserDataRepositoryMockUpdateParamPtrs
	expectationOrigins UserDataRepositoryMockUpdateExpectationOrigins
	results            *UserDataRepositoryMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// UserDataRepositoryMockUpdateParams contains parameters of the UserDataRepository.Update
type UserDataRepositoryMockUpdateParams struct {
	ctx      context.Context
	userID   int64
	userData *model.UserData
}

// UserDataRepositoryMockUpdateParamPtrs contains pointers to parameters of the UserDataRepository.Update
type UserDataRepositoryMockUpdateParamPtrs struct {
	ctx      *context.Context
	userID   *int64
	userData **model.UserData
}

// UserDataRepositoryMockUpdateResults contains results of the UserDataRepository.Update
type UserDataRepositoryMockUpdateResults struct {
	i1  int64
	err error
}

// UserDataRepositoryMockUpdateOrigins contains origins of expectations of the UserDataRepository.Update
type UserDataRepositoryMockUpdateExpectationOrigins struct {
	origin         string
	originCtx      string
	originUserID   string
	originUserData string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mUserDataRepositoryMockUpdate) Optional() *mUserDataRepositoryMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) Expect(ctx context.Context, userID int64, userData *model.UserData) *mUserDataRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserDataRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &UserDataRepositoryMockUpdateParams{ctx, userID, userData}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) ExpectCtxParam1(ctx context.Context) *mUserDataRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserDataRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &UserDataRepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectUserIDParam2 sets up expected param userID for UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) ExpectUserIDParam2(userID int64) *mUserDataRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserDataRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &UserDataRepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.userID = &userID
	mmUpdate.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectUserDataParam3 sets up expected param userData for UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) ExpectUserDataParam3(userData *model.UserData) *mUserDataRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserDataRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &UserDataRepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.userData = &userData
	mmUpdate.defaultExpectation.expectationOrigins.originUserData = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) Inspect(f func(ctx context.Context, userID int64, userData *model.UserData)) *mUserDataRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for UserDataRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by UserDataRepository.Update
func (mmUpdate *mUserDataRepositoryMockUpdate) Return(i1 int64, err error) *UserDataRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserDataRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &UserDataRepositoryMockUpdateResults{i1, err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the UserDataRepository.Update method
func (mmUpdate *mUserDataRepositoryMockUpdate) Set(f func(ctx context.Context, userID int64, userData *model.UserData) (i1 int64, err error)) *UserDataRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the UserDataRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the UserDataRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the UserDataRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mUserDataRepositoryMockUpdate) When(ctx context.Context, userID int64, userData *model.UserData) *UserDataRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserDataRepositoryMock.Update mock is already set by Set")
	}

	expectation := &UserDataRepositoryMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &UserDataRepositoryMockUpdateParams{ctx, userID, userData},
		expectationOrigins: UserDataRepositoryMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserDataRepository.Update return parameters for the expectation previously defined by the When method
func (e *UserDataRepositoryMockUpdateExpectation) Then(i1 int64, err error) *UserDataRepositoryMock {
	e.results = &UserDataRepositoryMockUpdateResults{i1, err}
	return e.mock
}

// Times sets number of times UserDataRepository.Update should be invoked
func (mmUpdate *mUserDataRepositoryMockUpdate) Times(n uint64) *mUserDataRepositoryMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of UserDataRepositoryMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mUserDataRepositoryMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_repository.UserDataRepository
func (mmUpdate *UserDataRepositoryMock) Update(ctx context.Context, userID int64, userData *model.UserData) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, userID, userData)
	}

	mm_params := UserDataRepositoryMockUpdateParams{ctx, userID, userData}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := UserDataRepositoryMockUpdateParams{ctx, userID, userData}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("UserDataRepositoryMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmUpdate.t.Errorf("UserDataRepositoryMock.Update got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.userData != nil && !minimock.Equal(*mm_want_ptrs.userData, mm_got.userData) {
				mmUpdate.t.Errorf("UserDataRepositoryMock.Update got unexpected parameter userData, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originUserData, *mm_want_ptrs.userData, mm_got.userData, minimock.Diff(*mm_want_ptrs.userData, mm_got.userData))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("UserDataRepositoryMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the UserDataRepositoryMock.Update")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, userID, userData)
	}
	mmUpdate.t.Fatalf("Unexpected call to UserDataRepositoryMock.Update. %v %v %v", ctx, userID, userData)
	return
}

// UpdateAfterCounter returns a count of finished UserDataRepositoryMock.Update invocations
func (mmUpdate *UserDataRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of UserDataRepositoryMock.Update invocations
func (mmUpdate *UserDataRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserDataRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mUserDataRepositoryMockUpdate) Calls() []*UserDataRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*UserDataRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *UserDataRepositoryMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *UserDataRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserDataRepositoryMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to UserDataRepositoryMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to UserDataRepositoryMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserDataRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockGetInspect()

			m.MinimockGetFromCacheInspect()

			m.MinimockSaveFieldInspect()

			m.MinimockUpdateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserDataRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserDataRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetDone() &&
		m.MinimockGetFromCacheDone() &&
		m.MinimockSaveFieldDone() &&
		m.MinimockUpdateDone()
}
